RestFixture: Formatters and Cell 
=========================================
Simon Elms, 13 Jun 2017

RestFixture.processRow(RowWrapper<?> currentRow) seems to be a key method.It calls row.getCell, which returns a CellWrapper object, either CellWrapper<string> for SLIM or CellWrapper<Parse> for FIT.

processRow is called only twice, by FitRestFixture.doCells, which is a top level FIT method, and by RestFixture.processSlimRow, which is called by RestFixture.doTable, a top level SLIM method.

A) RestFixture:
===============
//## TOP LEVEL METHOD:
public List<List<String>> doTable(List<List<String>> rows) {
	initialize(Runner.SLIM);
	List<List<String>> res = new Vector<List<String>>();
	getFormatter().setDisplayActual(displayActualOnRight);
	getFormatter().setDisplayAbsoluteURLInFull(displayAbsoluteURLInFull);
	getFormatter().setMinLengthForToggleCollapse(minLenForCollapseToggle);
	for (List<String> r : rows) {
	
	//## Calls for each row in the source table, represented by a List<string>.
	
	processSlimRow(res, r);
	}
	return res;}private void processSlimRow(List<List<String>> resultTable, List<String> row) {
	RowWrapper currentRow = new SlimRow(row);
	try 
	
	//## currentRow is a SlimRow
	
	processRow(currentRow);
	} catch (Exception e) {
	
	LOG.error("Exception raised when processing row " + row.get(0), e);
	
	getFormatter().exception(currentRow.getCell(0), e);
	} finally {
	
	List<String> rowAsList = mapSlimRow(row, currentRow);
	
	resultTable.add(rowAsList);
	}}
	
	B) FitRestFixture:
===================
//## Don't think this delegate is actually used./** * delegates to {@link RestFixture#processRow(RowWrapper)} *  * @param currentRow *            the row to process. */public void processRow(RowWrapper<?> currentRow) {
	restFixture.processRow(currentRow);}//## TOP LEVEL METHOD:public void doCells(Parse parse) {
	if (restFixture == null) {
	
	restFixture = new RestFixture();
	
	restFixture.setConfig(Config.getConfig(getConfigNameFromArgs()));
	
	String url = getBaseUrlFromArgs();
	
	if (url != null) {
	
	
	restFixture.setBaseUrl(new Url(Tools.fromSimpleTag(url)));
	
	}
	
	restFixture.initialize(Runner.FIT);
	
	((FitFormatter) restFixture.getFormatter())
	
	
	
	.setActionFixtureDelegate(this);
	}
	RowWrapper currentRow = new FitRow(parse);
	try {
	
	//## currentRow is a FitRow
	
	restFixture.processRow(currentRow);
	} catch (Exception exception) {
	
	LOG.error("Exception when processing row "
	
	
	
	+ currentRow.getCell(0).text(), exception);
	
	restFixture.getFormatter().exception(currentRow.getCell(0),
	
	
	
	exception);
	}}
	
	C) RestFixture.processRow:
==========================
//## RowWrapper<?> is a wildcard generic, a concept that doesn't exist in C#.//## The type parameter is string for SLIM and Parse for FIT.public void processRow(RowWrapper<?> currentRow) {
	row = currentRow;
	CellWrapper cell0 = row.getCell(0);
	if (cell0 == null) {
	
	throw new RuntimeException(
	
	
	
	"Current RestFixture row is not parseable (maybe empty or not existent)");
	}
	String methodName = cell0.text();
	if ("".equals(methodName)) {
	
	throw new RuntimeException("RestFixture method not specified");
	}
	Method method1;
	try {
	
	method1 = getClass().getMethod(methodName);
	
	method1.invoke(this);
	} catch (SecurityException e) {
	
	throw new RuntimeException(
	
	
	
	"Not enough permissions to access method " + methodName + " for this class " + this.getClass().getSimpleName(), e);
	} catch (NoSuchMethodException e) {
	
	throw new RuntimeException("Class " + this.getClass().getName() + " doesn't have a callable method named " + methodName, e);
	} catch (IllegalArgumentException e) {
	
	throw new RuntimeException("Method named " + methodName + " invoked with the wrong argument.", e);
	} catch (IllegalAccessException e) {
	
	throw new RuntimeException("Method named " + methodName + " is not public.", e);
	} catch (InvocationTargetException e) {
	
	throw new RuntimeException("Method named " + methodName + " threw an exception when executing.", e);
	}}
	
	D) RowWrapper<E>:
	=================
	//## Possible change: make processRow in both RestFixture and FitRestFixture a generic method, //##
	eg processRow<T>(RowWrapper<T> currentRow) ...//## Then call it passing in T= string or Parse, as appropriate.
	
	1) FitRestFixture:
	------------------
	//## Don't believe this is ever called.  Can't find any evidence it is.//## currentRow represents a FitRow(?)public void processRow(RowWrapper<?> currentRow) {
	restFixture.processRow(currentRow);}
	public void doCells(Parse parse) {
	if (restFixture == null) {
	
	restFixture = new RestFixture();
	
	restFixture.setConfig(Config.getConfig(getConfigNameFromArgs()));
	
	String url = getBaseUrlFromArgs();
	
	if (url != null) {
	
	
	restFixture.setBaseUrl(new Url(Tools.fromSimpleTag(url)));
	
	}
	
	restFixture.initialize(Runner.FIT);
	
	((FitFormatter) restFixture.getFormatter())
	
	
	
	.setActionFixtureDelegate(this);
	}
	//## RowWrapper represents a FitRow.
	//## So RowWrapper could be, for example, IFitRowWrapper.
	RowWrapper currentRow = new FitRow(parse);
	
	
	
	
	//## <---
	try {
	
	restFixture.processRow(currentRow);
	
	
	
	
	
	//## <---
	} catch (Exception exception) {
	
	LOG.error("Exception when processing row "
	
	
	
	+ currentRow.getCell(0).text(), exception);
	
	restFixture.getFormatter().exception(currentRow.getCell(0),
	
	
	
	exception);
	}}
	
	2) FitRow:
	----------
	public class FitRow implements RowWrapper<Parse> {
	private final Parse cells;
	private final List<CellWrapper<Parse>> row;
	/**
	 * a fit row
	 * @param parse the parse object representing the row.
	 */
	public FitRow(Parse parse) {
	
	this.cells = parse;
	
	Parse next = cells;
	
	row = new ArrayList<CellWrapper<Parse>>();
	
	while (next != null) {
	
	
	row.add(new FitCell(next));
	
	
	next = next.more;
	
	}
	}    public int size() {        if (row != null) {            return row.size();        }        return 0;    }    public CellWrapper<Parse> getCell(int c) {        if (c < row.size()) {            return row.get(c);        }        return null;    }    public CellWrapper<Parse> removeCell(int c) {        if (c < row.size()) {            return row.remove(c);        }        return null;    }}
	
	3) RestFixture:
	---------------
	protected RowWrapper row;public void processRow(RowWrapper<?> currentRow) {
	row = currentRow;
	CellWrapper cell0 = row.getCell(0);
	...}private void processSlimRow(List<List<String>> resultTable, List<String> row) {
	RowWrapper currentRow = new SlimRow(row);
	
	
	
	
	
	
	
	
	//## <---
	try {
	
	//## currentRow is a SlimRow
	
	processRow(currentRow);
	
	
	
	
	
	
	
	
	
	
	
	
	//## <---
	} catch (Exception e) {
	
	LOG.error("Exception raised when processing row " + row.get(0), e);
	
	getFormatter().exception(currentRow.getCell(0), e);
	} finally {
	
	List<String> rowAsList = mapSlimRow(row, currentRow);
	
	
	
	
	//## <---
	
	resultTable.add(rowAsList);
	}}//## Only place this is called is from processSlimRow, above, so currentRow is //##
	a SlimRowprivate List<String> mapSlimRow(List<String> resultRow,
	
	RowWrapper currentRow) {
	List<String> rowAsList = ((SlimRow) currentRow).asList();
	for (int c = 0; c < rowAsList.size(); c++) {
	
	// HACK: it seems that even if the content is unchanged,
	
	// Slim renders red cell
	
	String v = rowAsList.get(c);
	
	if (v.equals(resultRow.get(c))) {
	
	
	rowAsList.set(c, "");
	
	}
	}
	return rowAsList;}
	
	4) SlimRow:
	-----------
	public class SlimRow implements RowWrapper<String> {
	private final List<CellWrapper<String>> row;
	/**
	 * @param rawRow a list of string representing the row cells as passed by Slim.
	 */    public SlimRow(List<String> rawRow) {        this.row = new ArrayList<CellWrapper<String>>();        for (String r : rawRow) {            this.row.add(new SlimCell(r));
	
	}
	}
	public CellWrapper<String> getCell(int c) {        if (c < this.row.size()) {            return this.row.get(c);
	
	}
	
	return null;
	}    public int size() {        if (row != null) {            return row.size();        }        return 0;    }    /**     * @return the row as list of strings.     */    public List<String> asList() {        List<String> ret = new ArrayList<String>();        for (CellWrapper<String> w : row) {            ret.add(w.body());        }        return ret;    }    public CellWrapper<String> removeCell(int c) {        if (c < this.row.size()) {            return this.row.remove(c);        }        return null;    }}
	
	E) CellWrapper<E>:
	==================
	
	1) FitCell:
	------------------
	public class FitCell implements CellWrapper<Parse> {    private final Parse cell;
	/**
	 * a fit cell
	 * @param c the parse object representing the cell.
	 */    public FitCell(Parse c) {        this.cell = c;    }    @Override    public String text() {        try {            return cell.text();        } catch (RuntimeException e) {            return "";        }    }    @Override    public void body(String string) {        cell.body = string;    }    @Override    public String body() {        return cell.body;    }    @Override    public void addToBody(String string) {        cell.addToBody(string);    }    @Override    public Parse getWrapped() {        return cell;    }}
	 
	2) FitFormatter implements CellFormatter<Parse>:
	------------------------------------------------
	@Overridepublic void exception(CellWrapper<Parse> cell, String exceptionMessage) {
	Parse wrapped = cell.getWrapped();
	fixture.exception(wrapped, new FitFailureException(exceptionMessage));}@Overridepublic void exception(CellWrapper<Parse> cell, Throwable exception) {
	Parse wrapped = cell.getWrapped();
	fixture.exception(wrapped, exception);}@Overridepublic void check(CellWrapper<Parse> valueCell, RestDataTypeAdapter adapter) {
	valueCell.body(Tools.toHtml(valueCell.body()));
	fixture.check(valueCell.getWrapped(), adapter);}@Overridepublic void wrong(CellWrapper<Parse> expected, RestDataTypeAdapter typeAdapter) {
	String expectedContent = expected.body();
	String body = Tools.makeContentForWrongCell(expectedContent, typeAdapter, this, minLenForToggle);
	expected.body(body);
	fixture.wrong(expected.getWrapped());}@Overridepublic void right(CellWrapper<Parse> expected, RestDataTypeAdapter typeAdapter) {
	String expectedContent = expected.body();
	expected.body(Tools.makeContentForRightCell(expectedContent, typeAdapter, this, minLenForToggle));
	fixture.right(expected.getWrapped());}@Overridepublic void asLink(CellWrapper<Parse> cell, String resolvedUrl, String link, String text) {
	String actualText = text;
	String parsed = null;
	if(displayAbsoluteURLInFull) {
	
	parsed = Tools.fromSimpleTag(resolvedUrl);
	
	if(parsed.trim().startsWith("http")) {
	
	
	actualText = parsed;
	
	}
	}
	cell.body(Tools.toHtmlLink(link, actualText));}
	
	3) FitRow implements RowWrapper<Parse>:
	---------------------------------------
	private final List<CellWrapper<Parse>> row;public FitRow(Parse parse) {    this.cells = parse;    Parse next = cells;    row = new ArrayList<CellWrapper<Parse>>();    while (next != null) {        row.add(new FitCell(next));        next = next.more;    }}public CellWrapper<Parse> getCell(int c) {    if (c < row.size()) {        return row.get(c);    }    return null;}public CellWrapper<Parse> removeCell(int c) {    if (c < row.size()) {        return row.remove(c);    }    return null;}
	
	4) RestFixture:
	------------------
	Many references along the lines of:@SuppressWarnings({ "rawtypes", "unchecked" })public void setMultipartFileName() {
	CellWrapper cell = row.getCell(1);
	if (cell == null) {
	
	getFormatter().exception(row.getCell(0),
	
	
	
	"You must pass a multipart file name to set");
	} else {
	
	multipartFileName = GLOBALS.substitute(cell.text());
	
	renderReplacement(cell, multipartFileName);
	}}private RestMultipart registerMultipartRow(RestMultipart.RestMultipartType type, CellWrapper cellFileName, CellWrapper cellParamName, CellWrapper cellContentType, CellWrapper cellCharset) {// Param Name
	String multipartParamName = FILE;
	if (cellParamName !=null ) {
	
	multipartParamName = GLOBALS.substitute(cellParamName.text());
	}
	// FileName
	String multipartFileName = GLOBALS.substitute(cellFileName.text());
	// ContentType
	String multipartContentType = null;
	if (cellContentType !=null ) {
	
	multipartContentType = GLOBALS.substitute(cellContentType.text());
	}
	// Charset
	String multipartCharSet = null;
	if (cellCharset !=null ) {
	
	multipartCharSet = GLOBALS.substitute(cellCharset.text());
	}
	// Register Multipart
	RestMultipart restMultipart = new RestMultipart(type, multipartFileName, multipartContentType, multipartCharSet);
	multiFileNameByParamName.put(multipartParamName, restMultipart);
	// Display Replacement
	renderReplacement(cellFileName, multipartFileName);
	if (cellParamName!=null) {
	
	renderReplacement(cellParamName, multipartParamName);
	}
	if (cellContentType!=null) {
	
	renderReplacement(cellContentType, multipartContentType);
	}
	if (cellCharset!=null) {
	
	renderReplacement(cellCharset, multipartCharSet);
	}
	return restMultipart;}@SuppressWarnings({ "rawtypes", "unchecked" })private void process(CellWrapper expected, Object actual,
	
	RestDataTypeAdapter ta) {
	if (expected == null) {
	
	throw new IllegalStateException("You must specify a headers cell");
	}
	ta.set(actual);
	boolean ignore = "".equals(expected.text().trim());
	if (ignore) {
	
	String actualString = ta.toString();
	
	if (!"".equals(actualString)) {
	
	
	expected.addToBody(getFormatter().gray(actualString));
	
	}
	} else {
	
	boolean success = false;
	
	try {
	
	
	String substitute = GLOBALS.substitute(Tools.fromHtml(expected
	
	
	
	
	.text()));
	
	
	Object parse = ta.parse(substitute);
	
	
	success = ta.equals(parse, actual);
	
	} catch (Exception e) {
	
	
	getFormatter().exception(expected, e);
	
	
	return;
	
	}
	
	if (success) {
	
	
	getFormatter().right(expected, ta);
	
	} else {
	
	
	getFormatter().wrong(expected, ta);
	
	}
	}}@SuppressWarnings({ "rawtypes", "unchecked" })private void renderReplacement(CellWrapper cell, String actual) {
	StringTypeAdapter adapter = new StringTypeAdapter();
	adapter.set(actual);
	if (!adapter.equals(actual, cell.body())) {
	
	// eg - a substitution has occurred
	
	cell.body(actual);
	
	getFormatter().right(cell, adapter);
	}}
	
	5) SlimCell implements CellWrapper<String>:
	-------------------------------------------
	public class SlimCell implements CellWrapper<String> {
	private String cell;
	/** 
	 * a slim cell.
	 * @param c the content.
	 */
	public SlimCell(String c) {
	
	this.cell = c;
	}
	@Override
	public String text() {
	
	return cell;
	}
	@Override
	public void body(String string) {
	
	cell = string;
	}
	@Override
	public String body() {
	
	return cell;
	}
	@Override
	public void addToBody(String string) {
	
	cell = cell + string;
	}
	@Override
	public String getWrapped() {
	
	return cell;
	}}
	
	6) SlimFormatter implements CellFormatter<String>:
	--------------------------------------------------
	@Overridepublic void exception(CellWrapper<String> cell, String exceptionMessage) {    cell.body("error:" + Tools.wrapInDiv(exceptionMessage));}@Overridepublic void exception(CellWrapper<String> cell, Throwable exception) {    ByteArrayOutputStream out = new ByteArrayOutputStream();    PrintStream ps = new PrintStream(out);    exception.printStackTrace(ps);    //String m = Tools.toHtml(cell.getWrapped() + "\n-----\n") + Tools.toCode(Tools.toHtml(out.toString()));    String m = Tools.toHtml(cell.getWrapped() + "\n-----\n") + Tools.toCode(Tools.toHtml(out.toString()));    cell.body("error:" + Tools.wrapInDiv(m));    //cell.body("error:" + m);}@Overridepublic void check(CellWrapper<String> expected, RestDataTypeAdapter actual) {    if (null == expected.body() || "".equals(expected.body())) {        if (actual.get() == null) {            return;        } else {            expected.body(gray(actual.get().toString()));            return;        }    }    if (actual.get() != null && actual.equals(expected.body(), actual.get().toString())) {        right(expected, actual);    } else {        wrong(expected, actual);    }}@Overridepublic void wrong(CellWrapper<String> expected, RestDataTypeAdapter ta) {    String expectedContent = expected.body();    expected.body(Tools.makeContentForWrongCell(expectedContent, ta, this, minLenForToggle));    expected.body("fail:" + Tools.wrapInDiv(expected.body()));}@Overridepublic void right(CellWrapper<String> expected, RestDataTypeAdapter typeAdapter) {    expected.body("pass:" + Tools.wrapInDiv(Tools.makeContentForRightCell(expected.body(), typeAdapter, this, minLenForToggle)));}@Overridepublic void asLink(CellWrapper<String> cell, String resolvedUrl, String link, String text) {    String actualText = text;    String parsed = null;    if(displayAbsoluteURLInFull) {        parsed = Tools.fromSimpleTag(resolvedUrl);        if(parsed.trim().startsWith("http")) {            actualText = parsed;        }    }    cell.body("report:" + Tools.wrapInDiv(Tools.toHtmlLink(link, actualText)));}
	
	7) SlimRow implements RowWrapper<String>:
	-----------------------------------------
	public class SlimRow implements RowWrapper<String> {
	private final List<CellWrapper<String>> row;
	/**
	 * @param rawRow a list of string representing the row cells as passed by Slim.
	 */    public SlimRow(List<String> rawRow) {        this.row = new ArrayList<CellWrapper<String>>();        for (String r : rawRow) {            this.row.add(new SlimCell(r));
	
	}
	}
	public CellWrapper<String> getCell(int c) {        if (c < this.row.size()) {            return this.row.get(c);
	
	}
	
	return null;
	}    public int size() {        if (row != null) {            return row.size();        }        return 0;    }    /**     * @return the row as list of strings.     */    public List<String> asList() {        List<String> ret = new ArrayList<String>();        for (CellWrapper<String> w : row) {            ret.add(w.body());        }        return ret;    }    public CellWrapper<String> removeCell(int c) {        if (c < this.row.size()) {            return this.row.remove(c);        }        return null;    }}
	
	8) interface CellFormatter<E>:
	------------------------------
	/** * formats a cell containing an exception. *  * @param cellWrapper *            the cell wrapper * @param exception *            the excteption to render. */void exception(CellWrapper<E> cellWrapper, Throwable exception);/** * formats a cell containing an exception. *  * @param cellWrapper *            the cell wrapper * @param exceptionMessage *            the exception message to render. */void exception(CellWrapper<E> cellWrapper, String exceptionMessage);/** * formats a check cell. *  * @param valueCell *            the cell value. * @param adapter *            the adapter interpreting the value. */void check(CellWrapper<E> valueCell, RestDataTypeAdapter adapter);/** * formats a cell representing a wrong expectation. *  * @param expected *            the expected value * @param typeAdapter *            the adapter with the actual value. */void wrong(CellWrapper<E> expected, RestDataTypeAdapter typeAdapter);/** * formats a cell representing a right expectation. *  * @param expected *            the expected value * @param typeAdapter *            the adapter with the actual value. */void right(CellWrapper<E> expected, RestDataTypeAdapter typeAdapter);/** * formats the content as a hyperlink. *  * @param cell *            the cell. * @param resolvedUrl * 
	          the cell content after symbols' substitution. * @param link *            the uri in the href. * @param text *            the text. */void asLink(CellWrapper<E> cell, String resolvedUrl, String link, String text);
			  
	9) interface RowWrapper<E>:
	---------------------------
	public interface RowWrapper<E> {
	/**
	 * @param c the cell index
	 * @return the {@link CellWrapper} at a given position
	 */
	CellWrapper<E> getCell(int c);
	/**
	 * @return the row size.
	 */
	int size();
	/**
	 * removes a cell at a given position.
	 *
	 * @param c the cell index
	 * @return the removed cell.
	 */
	CellWrapper<E> removeCell(int c);}