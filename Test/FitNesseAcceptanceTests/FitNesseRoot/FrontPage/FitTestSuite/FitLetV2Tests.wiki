---
Test
---
!3 !-RestFixture-! V2 LET !-Javascript-! Functionality

Version 2 of the original Java implementation of !-RestFixture-! introduced !-Javascript-! extensions to 
LET for handling JSON data, particularly from HTTP response bodies.

!-RestFixture.Net-! supports this version 2 LET !-Javascript-! functionality, in addition to the original 
LET XPath functionality for parsing JSON response bodies.

!* !4 LET !-Javascript-! Syntax
1) First cell: The "let" command;
2) Second cell: The variable name;
3) Third cell: '''"js"''';
4) Fourth cell: The !-Javascript-! expression to evaluate.  The result of the evaluation will be 
assigned to the specified variable.  Any !-Javascript-! expression can be evaluated, it doesn't have 
to come from the HTTP response body.
*!

Examples:

| Fit Rest Fixture | http://localhost:7654 |
| LET              | message         | js | 'Hello, World!'      | Hello, World! |
| LET              | sum             | js | '2 + 5 = ' + (2 + 5) | 2 + 5 = 7     |
| LET              | two_expressions | js | !-a=1;
'a is ' + a-! | a is 1 |
| LET              | json_expr       | js | !-json = {
    "widget": {
        "debug": "on",
        "window": {
            "title": "Sample Konfabulator Widget",
            "name": "main_window",
            "width": 500,
            "height": 500
        },
        "image": { 
            "src": "Images/Sun.png",
            "name": "sun1",
            "hOffset": 250,
            "vOffset": 250,
            "alignment": "center"
        },
        "text": {
            "data": "Click Here",
            "size": 36,
            "style": "bold",
            "name": "text1",
            "hOffset": 250,
            "vOffset": 100,
            "alignment": "center",
            "onMouseUp": "sun1.opacity = (sun1.opacity / 100) * 90;"
        }
    }
};
json.widget.image.src-! | Images/Sun.png |

(Example courtesy of http://json.org/example.html)

The fixture Symbols map, containing both regular symbols and variables set via LET, should be 
accessible in !-JavaScript-! via symbols[''symbol name'']:

!* Syntax Difference from Java !-RestFixture-!:
!-RestFixture.Net-! has a slightly different syntax for accessing symbols in !-JavaScript-! than the 
Java !-RestFixture-!:

'''!-RestFixture-!:''' symbols.get(''symbol name'')
'''!-RestFixture.Net-!:''' symbols[''symbol name'']
*!

| Fit Rest Fixture | http://localhost:7654 |
| setBody          | <resource><name>Bill</name><data>Some data on Bill</data></resource> |
| POST             | /resources/           | 201 |   | no-body |
| LET              | id                    | header  | Location:/resources/(.+) |  |
| LET              | id_string             | js      | 'The id is: ' + symbols['id'] | The id is: %id% |

The most recent HTTP response should be accessible in !-JavaScript-! via the '''response''' object:

!* Accessing the Response Body in !-JavaScript-!:
The body of the response is read from different properties in responses with different Content-Types:

1) '''Content-Type = application/xml:''' Read the response body from the '''response.body''' property;
2) '''Content-Type = application/json:''' Read the response body from the '''response.jsonbody''' property.
*!

!* Accessing the Headers in !-JavaScript-!:
There are various methods of retrieving headers from a response:

1) '''header(''name'', ''index''):'''  Retrieves the header with the specified name and the specified index.  
So, for example, if there are two Set-Cookie headers then header(' Set-Cookie', 0) would retrieve 
the first one and header(' Set-Cookie', 1) would retrieve the second one.  '''If the specified header doesn't 
exist''' in the response then '''null''' is returned;

2) '''header0(''name''):'''  This is a shortcut for header(''name'', 0), to retrieve the first header with the 
specified name.  '''If the specified header doesn't exist''' in the response then '''null''' is returned;

3) '''headers(''name''):'''  An array of the headers with the same name (eg "Set-Cookie", which is sometimes 
repeated).  '''If the specified header doesn't exist''' in the response then an '''empty array''' is returned.  This 
is in contrast to the other methods that return null if the header doesn't exist;

4) '''headersText(''name''):'''  Similar to headers but returns a string representation of the headers.  
'''If the specified header doesn't exist''' then '''null''' is returned.  If a single header matches the 
name then the string value of the header is returned.  If multiple headers match the name then a string 
is returned of the form: "[value_1, value_2, ..., value_n]" (note the header in the example test table 
below is a single header, not multiple headers);

5) '''headerListSize(''name''):''' Returns the number of headers with the specified name;

6) '''headersSize():'''  Returns the total number of headers in the response.  If multiple headers have the same 
name they are counted separately.

*!

| Fit Rest Fixture | http://localhost:7654 |
| GET              | /resources/1          | 200 |  |  |
| LET              | body_value            | js  | response.body | { "resource" : { "name" : "a funky name", "data" : "an important message" } }|
| setBody          | <resource><name>Bill</name><data>Some data on Bill</data></resource> |
| POST             | /resources/           | 201 |   | no-body |
| LET              | status_code_value     | js  | response.statusCode | 201 |
| LET              | status_text_value     | js  | response.statusText | Created |
| LET              | loc                   | js  |response.header('Location', 0) | /resources/102 |
| LET              | loc                   | js  |response.header('Non-Existent', 0) | null |
| LET              | loc                   | js  |response.header0('Location')   | /resources/102 |
| LET              | loc                   | js  |response.header0('Non-Existent') | null |
| LET              | header_size           | js  | response.headerListSize('Location') | 1 |
| LET              | all_headers_size      | js  | response.headersSize() | 5 |
| LET              | header_array          | js  | response.headers('Location') | /resources/102 |
| LET              | header_array          | js  | response.headers('Non-Existent') |  |
| LET              | header_array_as_text  | js  | response.headersText('Location') | /resources/102 |
| LET              | header_array_as_text  | js  | response.headersText('Non-Existent') | null |

For a response with Content-Type application/json the response body should be accessible as a JSON 
object via response.jsonbody.  Properties of the JSON object should be accessible via dot notation:

| Fit Rest Fixture | http://localhost:7654 |
| GET              | /resources/1.json     | 200 |  |  |
| LET              | body_value            | js  | response.jsonbody |  |
| LET              | body_value            | js  | response.jsonbody.resource.name | a funky name |